months.v <- "January February March April May June July August September October November December"
months.l <- strsplit(months.v, split = " ")
months
months.l
length(months.l)
class(months.l)
months.l[1]
months.l[[1]]
months.indiv.v <- strsplit(months.v, "\\W")
length(months.indiv.v)
months.indiv.v <- unlist(months.indiv.v)
length(months.indiv.v)
months.indiv.v <- strsplit(months.v, "\\W")
class(months.v)
class(months.indiv.v)
months.indiv.v <- unlist(months.indiv.v)
months.indiv.v
length(months.indiv.v)
class(months.indiv.v)
months.indiv.v
library(httr)
library(rvest)
library(XML)
landingpage<-"http://usa.chinadaily.com.cn/a/201801/26/WS5a6a5053a3106e7dcc136a9f.html"
landingurl<-read_html(landingpage)
landingurl
landingurl%>%html_node("h1")%>%html_text()
title<-landingurl%>%html_node("h1")%>%html_text()
title
articletext<-landingurl%>%html_nodes("")
?html_nodes
articletext<-landingurl%>%html_nodes(.info)
articletext<-landingurl%>%html_nodes(".info")
articletext
articletext<-landingurl%>%html_nodes("#bread-nav")
articletext
articletext<-landingurl%>%html_nodes(".info")
articletext
authortext<-landingurl%>%html_nodes(".info_1")%>%html_text()
authortext
authortext<-landingurl%>%html_nodes(".info_1")
authortext
authortext<-landingurl%>%html_nodes(".info_l")%>%html_text()
authortext
authortext<-landingurl%>%html_nodes("#Content p")%>%html_text()
maintext<-landingurl%>%html_nodes("#Content p")%>%html_text()
maintext
landingurl
?plot
drs <- data.frame("matt", "devin", "rachel", "sarah")
dim(drs)
drs <- data.frame("zach", "rachel", "jeannine", "cocoa")
dim(drs)
drs <- data.frame("matt", "devin", "rachel", "sarah")
drsIncubator <- data.frame("zach", "rachel", "jeannine", "cocoa")
errbody <- rbind(drs, drsIncubator)
errbody
?rbind
drs
drsIncubator
library("stringr", lib.loc="~/Library/R/3.3/library")
library("tidyverse", lib.loc="~/Library/R/3.3/library")
install.packages("tidytext")
library(tidytext)
install.packages("tidytext")
library(rJava)
Sys.getenv("JAVA_HOME")
library(mallet)
mallet.instances <- mallet.import(documents$id, documents$text, "data/stoplist.csv", FALSE, token.regexp="[\\p{L}']+")
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre")
library(mallet)
library("rJava", lib.loc="~/Library/R/3.5/library")
detach("package:rJava", unload=TRUE)
remove.packages("rJava", lib="~/Library/R/3.5/library")
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre
JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre"
R_JAVA_LD_LIBRARY_PATH=${JAVA_HOME}/lib/server/libjvm.dylib
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/Library/R/3.5/library")
detach("package:rJava", unload=TRUE)
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre")
library("rJava", lib.loc="~/Library/R/3.5/library")
remove.packages("rJava", lib="~/Library/R/3.5/library")
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
detach("package:rJava", unload=TRUE)
remove.packages("rJava", lib="~/Library/R/3.5/library")
options(java.home="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk")
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
options(java.home="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/Library/R/3.5/library")
detach("package:rJava", unload=TRUE)
remove.packages("rJava", lib="~/Library/R/3.5/library")
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
?install.packages
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home')
Sys.getenv("JAVA_HOME")
Sys.setenv(LD_LIBRARY_PATH='$JAVA_HOME/jre/lib/server')
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
library("rJava")
remove.packages("rJava", lib="~/Library/R/3.5/library")
install.packages("rJava", type = "source")
install.packages("rJava", type = "source")
install.packages("rJava", type = "source")
install.packages("rJava", type = "source")
install.packages("rJava")
library("rJava", lib.loc="~/Library/R/3.5/library")
library("mallet", lib.loc="~/Library/R/3.5/library")
library(tidyverse)
?data.frame
data.frame(1:3,1:10)
data.frame(1,1:10)
my.df <- data.frame(1,1:10)
my.df[1,10]
my.df[1,9]
my.df <- data.frame(1,1:10,rep("test"))
my.df
my.df[1,9]
my.df[2,9]
dim(my.df)
my.df[9,2]
my.df[9,3]
class(my.df[9,3])
my.df <- data.frame(1,1:10,rep("test"), stringsAsFactors = FALSE)
class(my.df[9,3])
?read.csv
blocksAlive.df <- as.data.frame(sort(table(blocksAlive)))
blocksDead.df
blocksAlive.df <- as.data.frame(sort(table(blocksAlive)))
# Read the csv file
nycTreeData.df <- read.csv("2015-street-tree-census-tree-data.csv", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
# create an object with all of the common names of the trees
commonName <- nycTreeData.df$spc_common
treeNames.sorted.freq.t <- sort(table(commonName), decreasing = TRUE)
plot(treeNames.sorted.freq.t[1:10])
# create an object that contains the status of all of the trees and give me the unique values
treeStatus <- nycTreeData.df$status
unique(treeStatus)
# find all of the rows where the tree is listed as dead or a stump
dead <- c("Stump", "Dead")
deadTrees <- nycTreeData.df[nycTreeData.df$status %in% dead,]
aliveTrees <- nycTreeData.df[nycTreeData.df$status %in% "Alive",]
# Exercise to do together
# How do I create a plot that shows the number of dead and alive trees on blocks that have dead trees?
setwd("~/Documents/presentations/Workshops/drsGHWorkshops/S2020/IntermedTextAnalysis/")
setwd("~/Documents/presentations/Workshops/drsGHWorkshops/S2020/IntermedTextAnalysis/")
?scan
smith1.v <- ("texts/smith.celestina1.txt", what = "character", sep="\n")
smith1.v <- scan("texts/smith.celestina1.txt", what = "character", sep="\n")
smith1.v
class(smith1.v)
smith1.v <- scan("texts/smith.celestina1.txt", what = "character", sep="\n")
smith2.v <- scan("texts/smith.celestina2.txt", what = "character", sep="\n")
smith3.v <- scan("texts/smith.celestina3.txt", what = "character", sep="\n")
smith4.v <- scan("texts/smith.celestina4.txt", what = "character", sep="\n")
smith.v <- c(smith1.v, smith2.v, smith3.v, smith4.v)
length(smith.v)
smith.v[10]
smith.all.v <- c(smith1.v, smith2.v, smith3.v, smith4.v)
smith.v <- paste(smith.all.v, collapse = " ")
length(smith.v)
# make the text lowercase
# split the text up on "non-word" characters (outputs as a list)
# convert that list into a character vector
smith.word.v <- unlist(strsplit(tolower(smith.v), "\\W"))
smith.word.v[1]
smith.word.v[10]
smith.word.v[1:20]
smith.word.v <-smith.word.v[not.blanks.v]
# remove blanks
not.blanks.v <- which(smith.word.v!="")
smith.word.v <-smith.word.v[not.blanks.v]
smith.word.v[1:20]
# creating a word frequency table
smith.freqs.t <- sort(table(smith.word.v), decreasing = TRUE)
# plot the top ten words
plot(smith.freqs.t[1:10], type = "b", xlab = "Top Ten Words in Smith's Celestina")
axis(1,1:10, labels = names(smith.freqs.t[1:10]))
smith.rel.freqs.t <- 100 * (smith.freqs.t/sum(smith.freqs.t))
smith.rel.freqs.t[1:10]
# and plot it
plot(smith.rel.freqs.t[1:10], type = "b", xlab = "Top Ten Words in Smith's Celestina")
axis(1,1:10, labels = names(smith.rel.freqs.t[1:10]))
directory <- "texts/"
files.v <- dir(path = "directory", pattern = ".txt")
files.v <- dir(path = "directory", pattern = ".*txt")
files.v <- dir(path = directory, pattern = ".*txt")
fileNames <- dir(path = directory, pattern = ".*txt")
setwd("~/Documents/presentations/Workshops/drsGHWorkshops/S2020/IntermedTextAnalysis/")
# combine all of Charlotte Smith's Celestina into one R variable
smith1 <- scan("texts/smith.celestina1.txt", what = "character", sep="\n")
smith2 <- scan("texts/smith.celestina2.txt", what = "character", sep="\n")
smith3 <- scan("texts/smith.celestina3.txt", what = "character", sep="\n")
smith4 <- scan("texts/smith.celestina4.txt", what = "character", sep="\n")
smith.all <- c(smith1, smith2, smith3, smith4)
smith <- paste(smith.all, collapse = " ")
# make the text lowercase
# split the text up on "non-word" characters (outputs as a list)
# convert that list into a character vector
smith.word <- unlist(strsplit(tolower(smith), "\\W"))
# remove blanks
noBlanks <- which(smith.word!="")
smith.word <-smith.word[noBlanks]
# creating a word frequency table in descending order of frequency
smith.freqs <- sort(table(smith.word), decreasing = TRUE)
# plot the top ten words (raw frequency)
plot(smith.freqs[1:10], type = "b", xlab = "Top Ten Words in Smith's Celestina", ylab = "Raw Frequencies of the Top Ten Words")
axis(1,1:10, labels = names(smith.freqs[1:10]))
# create relative frequency table
smith.relFreqs <- 100 * (smith.freqs/sum(smith.freqs))
# and plot it
plot(smith.relFreqs[1:10], type = "b", xlab = "Top Ten Words in Smith's Celestina", ylab = "Relative Frequencies of the Top Ten Words")
axis(1,1:10, labels = names(smith.relFreqs[1:10]))
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(smith), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(smith), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
fileNames <- dir(path = directory, pattern = ".*txt")
fileNames
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(smith), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
setwd("~/Documents/presentations/Workshops/drsGHWorkshops/S2020/IntermedTextAnalysis/")
directory <- "texts/"
fileNames <- dir(path = directory, pattern = ".*txt")
?scan
setwd("~/Documents/presentations/Workshops/drsGHWorkshops/S2020/IntermedTextAnalysis/texts")
fileNames <- dir(path = directory, pattern = ".*txt")
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file =fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(smith), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(smith), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
fileNames
fileNames <- dir(pattern = ".*txt")
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(smith), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
frequencies <- mapply(data.frame, ID=seq_along(allFrequencies), allFrequencies, SIMPLIFY = FALSE, MoreArgs = list(stringsAsFactors=FALSE))
class(frequencies)
frequencies.df <- do.call(rbind, frequencies)
dim(frequencies.df)
frequencies.df[1,]
# create a full word frequency table
fullFreq.table <- xtabs(Freq ~ ID + word, data = frequencies.df)
dim(fullFreq.table)
setwd("~/Documents/presentations/Workshops/drsGHWorkshops/S2020/IntermedTextAnalysis/texts")
fileNames <- dir(pattern = ".*txt")
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(smith), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
fileNames[1]
fileNames[28]
# create a list of all of the word frequencies
allFrequencies <- list()
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(fileNames[i], what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
directory <- "texts"
fileNames <- dir(directory, pattern = ".*txt")
directory <- "texts"
fileNames <- dir(directory, pattern = ".*txt")
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
setwd("~/Documents/presentations/Workshops/drsGHWorkshops/S2020/IntermedTextAnalysis/")
directory <- "texts"
fileNames <- dir(directory, pattern = ".*txt")
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[i] <- text.relFreqs
}
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[i]] <- text.relFreqs
}
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames]] <- text.relFreqs
}
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[fileNames] <- text.relFreqs
}
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[fileNames[i]] <- text.relFreqs
}
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[i]] <- text.relFreqs
}
allFrequencies[[1]]
allFrequencies[[28]]
textData <- scan(file.path(directory, fileNames[1]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[1]] <- text.relFreqs
allFrequencies[[1]]
# create a list of all of the word frequencies
allFrequencies <- list()
for (i in 1:length(fileNames)) {
textData <- scan(file.path(directory, fileNames[i]), what = "character", sep = "\n")
words <- paste(textData, collapse=" ")
word <- unlist(strsplit(tolower(words), "\\W"))
noBlanks <- which(word!="")
word <- word[noBlanks]
text.freqs <- table(word)
text.relFreqs <- 100 * (text.freqs/sum(text.freqs))
allFrequencies[[fileNames[i]]] <- text.relFreqs
}
frequencies <- mapply(data.frame, ID=seq_along(allFrequencies), allFrequencies, SIMPLIFY = FALSE, MoreArgs = list(stringsAsFactors=FALSE))
frequencies.df <- do.call(rbind, frequencies)
# create a full word frequency table
fullFreq.table <- xtabs(Freq ~ ID + word, data = frequencies.df)
dim(fullFreq.table)
colnames(fullFreq.table[100:110])
?str
str(fullFreq.table)
fullFreq.matrix <- apply(fullFreq.table, 2, as.numeric)
dim(fullFreq.matrix)
str(fullFreq.matrix)
colnames(fullFreq.matrix)
fullFreq.matrix[,1]
# reduce the matrix to only include words whose relative frequency is above .25
frequentWords.matrix <- fullFreq.matrix[,apply(fullFreq.matrix,2,mean)>=.25]
dim(frequentWords.matrix)
frequentWords.matrix
# distance between features
featDist <- dist(frequentWords.matrix)
clusterTexts <- hclust(featDist)
clusterTexts$labels <- names(allFrequencies)
clusterTexts$height
plot(cluster)
plot(clusterTexts)
